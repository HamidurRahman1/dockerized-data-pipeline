version: '3'
x-airflow-common:
  &airflow-common
  image: apache/airflow:latest
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__LOAD_DEFAULT_CONNECTIONS: 'false'
    AIRFLOW__CORE__DEFAULT_TIMEZONE: 'America/New_York'
    AIRFLOW__API__ENABLE_EXPERIMENTAL_API: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.session,airflow.api.auth.backend.basic_auth'
    AIRFLOW__DATABASE__LOAD_DEFAULT_CONNECTIONS: 'false'
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://${AIRFLOW_META_DB_USERNAME}:${AIRFLOW_META_DB_PASS}@airflow-postgres/${AIRFLOW_META_DB}
  volumes:
    - ${MOUNT_VOL}/data:/data
    - ${MOUNT_VOL}/data/landing:/data/landing
    - ${MOUNT_VOL}/data/processed:/data/processed
    - ${MOUNT_VOL}/dags:/opt/airflow/dags
    - ${MOUNT_VOL}/logs:/opt/airflow/logs
  depends_on:
    &airflow-common-depends-on
    airflow-postgres:
      condition: service_healthy

services:
  airflow-postgres:
    image: postgres:15
    environment:
      POSTGRES_USER: ${AIRFLOW_META_DB_USERNAME}
      POSTGRES_PASSWORD: ${AIRFLOW_META_DB_PASS}
      POSTGRES_DB: ${AIRFLOW_META_DB}
      TZ: 'America/New_York'
      PGTZ: 'America/New_York'
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${AIRFLOW_META_DB_USERNAME}"]
      interval: 30s
      retries: 3
    ports:
      - "5000:5432"
    volumes:
      - ${MOUNT_VOL}/pgdata/airflow-metadb:/var/lib/postgresql/data
    restart: always
    networks:
      - dd-pipeline

  airflow-webserver:
    <<: *airflow-common
    ports:
      - "8000:8080"
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow db init;
        airflow users create --role Admin --username ${AIRFLOW_WEBSERVER_USERNAME} --password ${AIRFLOW_WEBSERVER_PASS} \
          --firstname Hamidur --lastname Rahman --email admin@example.com;
        airflow webserver;
    networks:
      - dd-pipeline

  airflow-scheduler:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        airflow scheduler;
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
    networks:
      - dd-pipeline

networks:
  dd-pipeline: